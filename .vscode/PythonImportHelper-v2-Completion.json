[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "AcademicPeriod",
        "importPath": "src.models.academic_period",
        "description": "src.models.academic_period",
        "isExtraImport": true,
        "detail": "src.models.academic_period",
        "documentation": {}
    },
    {
        "label": "CreateAcademicPeriodRequest",
        "importPath": "src.models.academic_period",
        "description": "src.models.academic_period",
        "isExtraImport": true,
        "detail": "src.models.academic_period",
        "documentation": {}
    },
    {
        "label": "AcademicPeriod",
        "importPath": "src.models.academic_period",
        "description": "src.models.academic_period",
        "isExtraImport": true,
        "detail": "src.models.academic_period",
        "documentation": {}
    },
    {
        "label": "CreateAcademicPeriodRequest",
        "importPath": "src.models.academic_period",
        "description": "src.models.academic_period",
        "isExtraImport": true,
        "detail": "src.models.academic_period",
        "documentation": {}
    },
    {
        "label": "AcademicPeriod",
        "importPath": "src.models.academic_period",
        "description": "src.models.academic_period",
        "isExtraImport": true,
        "detail": "src.models.academic_period",
        "documentation": {}
    },
    {
        "label": "CreateAcademicPeriodRequest",
        "importPath": "src.models.academic_period",
        "description": "src.models.academic_period",
        "isExtraImport": true,
        "detail": "src.models.academic_period",
        "documentation": {}
    },
    {
        "label": "Campus",
        "importPath": "src.models.campus",
        "description": "src.models.campus",
        "isExtraImport": true,
        "detail": "src.models.campus",
        "documentation": {}
    },
    {
        "label": "CreateCampusRequest",
        "importPath": "src.models.campus",
        "description": "src.models.campus",
        "isExtraImport": true,
        "detail": "src.models.campus",
        "documentation": {}
    },
    {
        "label": "Campus",
        "importPath": "src.models.campus",
        "description": "src.models.campus",
        "isExtraImport": true,
        "detail": "src.models.campus",
        "documentation": {}
    },
    {
        "label": "CreateCampusRequest",
        "importPath": "src.models.campus",
        "description": "src.models.campus",
        "isExtraImport": true,
        "detail": "src.models.campus",
        "documentation": {}
    },
    {
        "label": "CareerCampus",
        "importPath": "src.models.career_campus",
        "description": "src.models.career_campus",
        "isExtraImport": true,
        "detail": "src.models.career_campus",
        "documentation": {}
    },
    {
        "label": "CreateCareerCampusRequest",
        "importPath": "src.models.career_campus",
        "description": "src.models.career_campus",
        "isExtraImport": true,
        "detail": "src.models.career_campus",
        "documentation": {}
    },
    {
        "label": "CareerCampus",
        "importPath": "src.models.career_campus",
        "description": "src.models.career_campus",
        "isExtraImport": true,
        "detail": "src.models.career_campus",
        "documentation": {}
    },
    {
        "label": "CreateCareerCampusRequest",
        "importPath": "src.models.career_campus",
        "description": "src.models.career_campus",
        "isExtraImport": true,
        "detail": "src.models.career_campus",
        "documentation": {}
    },
    {
        "label": "CareerPeriod",
        "importPath": "src.models.career_period",
        "description": "src.models.career_period",
        "isExtraImport": true,
        "detail": "src.models.career_period",
        "documentation": {}
    },
    {
        "label": "CreateCareerPeriodRequest",
        "importPath": "src.models.career_period",
        "description": "src.models.career_period",
        "isExtraImport": true,
        "detail": "src.models.career_period",
        "documentation": {}
    },
    {
        "label": "CareerPeriod",
        "importPath": "src.models.career_period",
        "description": "src.models.career_period",
        "isExtraImport": true,
        "detail": "src.models.career_period",
        "documentation": {}
    },
    {
        "label": "CreateCareerPeriodRequest",
        "importPath": "src.models.career_period",
        "description": "src.models.career_period",
        "isExtraImport": true,
        "detail": "src.models.career_period",
        "documentation": {}
    },
    {
        "label": "CareerTeacher",
        "importPath": "src.models.career_teacher",
        "description": "src.models.career_teacher",
        "isExtraImport": true,
        "detail": "src.models.career_teacher",
        "documentation": {}
    },
    {
        "label": "CreateCareerTeacherRequest",
        "importPath": "src.models.career_teacher",
        "description": "src.models.career_teacher",
        "isExtraImport": true,
        "detail": "src.models.career_teacher",
        "documentation": {}
    },
    {
        "label": "CareerTeacher",
        "importPath": "src.models.career_teacher",
        "description": "src.models.career_teacher",
        "isExtraImport": true,
        "detail": "src.models.career_teacher",
        "documentation": {}
    },
    {
        "label": "CreateCareerTeacherRequest",
        "importPath": "src.models.career_teacher",
        "description": "src.models.career_teacher",
        "isExtraImport": true,
        "detail": "src.models.career_teacher",
        "documentation": {}
    },
    {
        "label": "Career",
        "importPath": "src.models.career",
        "description": "src.models.career",
        "isExtraImport": true,
        "detail": "src.models.career",
        "documentation": {}
    },
    {
        "label": "CreateCareerRequest",
        "importPath": "src.models.career",
        "description": "src.models.career",
        "isExtraImport": true,
        "detail": "src.models.career",
        "documentation": {}
    },
    {
        "label": "Career",
        "importPath": "src.models.career",
        "description": "src.models.career",
        "isExtraImport": true,
        "detail": "src.models.career",
        "documentation": {}
    },
    {
        "label": "Career",
        "importPath": "src.models.career",
        "description": "src.models.career",
        "isExtraImport": true,
        "detail": "src.models.career",
        "documentation": {}
    },
    {
        "label": "CreateCareerRequest",
        "importPath": "src.models.career",
        "description": "src.models.career",
        "isExtraImport": true,
        "detail": "src.models.career",
        "documentation": {}
    },
    {
        "label": "Classroom",
        "importPath": "src.models.classroom",
        "description": "src.models.classroom",
        "isExtraImport": true,
        "detail": "src.models.classroom",
        "documentation": {}
    },
    {
        "label": "Classroom",
        "importPath": "src.models.classroom",
        "description": "src.models.classroom",
        "isExtraImport": true,
        "detail": "src.models.classroom",
        "documentation": {}
    },
    {
        "label": "CreateClassroomRequest",
        "importPath": "src.models.classroom",
        "description": "src.models.classroom",
        "isExtraImport": true,
        "detail": "src.models.classroom",
        "documentation": {}
    },
    {
        "label": "Classroom",
        "importPath": "src.models.classroom",
        "description": "src.models.classroom",
        "isExtraImport": true,
        "detail": "src.models.classroom",
        "documentation": {}
    },
    {
        "label": "CreateClassroomRequest",
        "importPath": "src.models.classroom",
        "description": "src.models.classroom",
        "isExtraImport": true,
        "detail": "src.models.classroom",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "src.models.course",
        "description": "src.models.course",
        "isExtraImport": true,
        "detail": "src.models.course",
        "documentation": {}
    },
    {
        "label": "CreateCourseRequest",
        "importPath": "src.models.course",
        "description": "src.models.course",
        "isExtraImport": true,
        "detail": "src.models.course",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "src.models.course",
        "description": "src.models.course",
        "isExtraImport": true,
        "detail": "src.models.course",
        "documentation": {}
    },
    {
        "label": "CreateCourseRequest",
        "importPath": "src.models.course",
        "description": "src.models.course",
        "isExtraImport": true,
        "detail": "src.models.course",
        "documentation": {}
    },
    {
        "label": "Hours",
        "importPath": "src.models.hours",
        "description": "src.models.hours",
        "isExtraImport": true,
        "detail": "src.models.hours",
        "documentation": {}
    },
    {
        "label": "Hours",
        "importPath": "src.models.hours",
        "description": "src.models.hours",
        "isExtraImport": true,
        "detail": "src.models.hours",
        "documentation": {}
    },
    {
        "label": "CreateHoursRequest",
        "importPath": "src.models.hours",
        "description": "src.models.hours",
        "isExtraImport": true,
        "detail": "src.models.hours",
        "documentation": {}
    },
    {
        "label": "Modality",
        "importPath": "src.models.modality",
        "description": "src.models.modality",
        "isExtraImport": true,
        "detail": "src.models.modality",
        "documentation": {}
    },
    {
        "label": "CreateModalityRequest",
        "importPath": "src.models.modality",
        "description": "src.models.modality",
        "isExtraImport": true,
        "detail": "src.models.modality",
        "documentation": {}
    },
    {
        "label": "Modality",
        "importPath": "src.models.modality",
        "description": "src.models.modality",
        "isExtraImport": true,
        "detail": "src.models.modality",
        "documentation": {}
    },
    {
        "label": "CreateModalityRequest",
        "importPath": "src.models.modality",
        "description": "src.models.modality",
        "isExtraImport": true,
        "detail": "src.models.modality",
        "documentation": {}
    },
    {
        "label": "RoomBlock",
        "importPath": "src.models.room_block",
        "description": "src.models.room_block",
        "isExtraImport": true,
        "detail": "src.models.room_block",
        "documentation": {}
    },
    {
        "label": "CreateRoomBlockRequest",
        "importPath": "src.models.room_block",
        "description": "src.models.room_block",
        "isExtraImport": true,
        "detail": "src.models.room_block",
        "documentation": {}
    },
    {
        "label": "RoomBlock",
        "importPath": "src.models.room_block",
        "description": "src.models.room_block",
        "isExtraImport": true,
        "detail": "src.models.room_block",
        "documentation": {}
    },
    {
        "label": "CreateRoomBlockRequest",
        "importPath": "src.models.room_block",
        "description": "src.models.room_block",
        "isExtraImport": true,
        "detail": "src.models.room_block",
        "documentation": {}
    },
    {
        "label": "SectionTeacher",
        "importPath": "src.models.section_teacher",
        "description": "src.models.section_teacher",
        "isExtraImport": true,
        "detail": "src.models.section_teacher",
        "documentation": {}
    },
    {
        "label": "CreateSectionTeacherRequest",
        "importPath": "src.models.section_teacher",
        "description": "src.models.section_teacher",
        "isExtraImport": true,
        "detail": "src.models.section_teacher",
        "documentation": {}
    },
    {
        "label": "SectionWeeks",
        "importPath": "src.models.section_weeks",
        "description": "src.models.section_weeks",
        "isExtraImport": true,
        "detail": "src.models.section_weeks",
        "documentation": {}
    },
    {
        "label": "CreateSectionWeeksRequest",
        "importPath": "src.models.section_weeks",
        "description": "src.models.section_weeks",
        "isExtraImport": true,
        "detail": "src.models.section_weeks",
        "documentation": {}
    },
    {
        "label": "SectionWeeks",
        "importPath": "src.models.section_weeks",
        "description": "src.models.section_weeks",
        "isExtraImport": true,
        "detail": "src.models.section_weeks",
        "documentation": {}
    },
    {
        "label": "CreateSectionWeeksRequest",
        "importPath": "src.models.section_weeks",
        "description": "src.models.section_weeks",
        "isExtraImport": true,
        "detail": "src.models.section_weeks",
        "documentation": {}
    },
    {
        "label": "Section",
        "importPath": "src.models.section",
        "description": "src.models.section",
        "isExtraImport": true,
        "detail": "src.models.section",
        "documentation": {}
    },
    {
        "label": "CreateSectionRequest",
        "importPath": "src.models.section",
        "description": "src.models.section",
        "isExtraImport": true,
        "detail": "src.models.section",
        "documentation": {}
    },
    {
        "label": "Section",
        "importPath": "src.models.section",
        "description": "src.models.section",
        "isExtraImport": true,
        "detail": "src.models.section",
        "documentation": {}
    },
    {
        "label": "CreateSectionRequest",
        "importPath": "src.models.section",
        "description": "src.models.section",
        "isExtraImport": true,
        "detail": "src.models.section",
        "documentation": {}
    },
    {
        "label": "TeacherTime",
        "importPath": "src.models.teacher_time",
        "description": "src.models.teacher_time",
        "isExtraImport": true,
        "detail": "src.models.teacher_time",
        "documentation": {}
    },
    {
        "label": "CreateTeacherTimeRequest",
        "importPath": "src.models.teacher_time",
        "description": "src.models.teacher_time",
        "isExtraImport": true,
        "detail": "src.models.teacher_time",
        "documentation": {}
    },
    {
        "label": "TeacherTime",
        "importPath": "src.models.teacher_time",
        "description": "src.models.teacher_time",
        "isExtraImport": true,
        "detail": "src.models.teacher_time",
        "documentation": {}
    },
    {
        "label": "CreateTeacherTimeRequest",
        "importPath": "src.models.teacher_time",
        "description": "src.models.teacher_time",
        "isExtraImport": true,
        "detail": "src.models.teacher_time",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "src.models.teacher",
        "description": "src.models.teacher",
        "isExtraImport": true,
        "detail": "src.models.teacher",
        "documentation": {}
    },
    {
        "label": "CreateTeacherRequest",
        "importPath": "src.models.teacher",
        "description": "src.models.teacher",
        "isExtraImport": true,
        "detail": "src.models.teacher",
        "documentation": {}
    },
    {
        "label": "CreateTeacherRequest",
        "importPath": "src.models.teacher",
        "description": "src.models.teacher",
        "isExtraImport": true,
        "detail": "src.models.teacher",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "src.models.teacher",
        "description": "src.models.teacher",
        "isExtraImport": true,
        "detail": "src.models.teacher",
        "documentation": {}
    },
    {
        "label": "CreateTeacherRequest",
        "importPath": "src.models.teacher",
        "description": "src.models.teacher",
        "isExtraImport": true,
        "detail": "src.models.teacher",
        "documentation": {}
    },
    {
        "label": "TimeBlock",
        "importPath": "src.models.time_block",
        "description": "src.models.time_block",
        "isExtraImport": true,
        "detail": "src.models.time_block",
        "documentation": {}
    },
    {
        "label": "CreateTimeBlockRequest",
        "importPath": "src.models.time_block",
        "description": "src.models.time_block",
        "isExtraImport": true,
        "detail": "src.models.time_block",
        "documentation": {}
    },
    {
        "label": "TimeBlock",
        "importPath": "src.models.time_block",
        "description": "src.models.time_block",
        "isExtraImport": true,
        "detail": "src.models.time_block",
        "documentation": {}
    },
    {
        "label": "CreateTimeBlockRequest",
        "importPath": "src.models.time_block",
        "description": "src.models.time_block",
        "isExtraImport": true,
        "detail": "src.models.time_block",
        "documentation": {}
    },
    {
        "label": "Week",
        "importPath": "src.models.week",
        "description": "src.models.week",
        "isExtraImport": true,
        "detail": "src.models.week",
        "documentation": {}
    },
    {
        "label": "CreateWeekRequest",
        "importPath": "src.models.week",
        "description": "src.models.week",
        "isExtraImport": true,
        "detail": "src.models.week",
        "documentation": {}
    },
    {
        "label": "Week",
        "importPath": "src.models.week",
        "description": "src.models.week",
        "isExtraImport": true,
        "detail": "src.models.week",
        "documentation": {}
    },
    {
        "label": "CreateWeekRequest",
        "importPath": "src.models.week",
        "description": "src.models.week",
        "isExtraImport": true,
        "detail": "src.models.week",
        "documentation": {}
    },
    {
        "label": "ClassTime",
        "importPath": "src.models.class_time",
        "description": "src.models.class_time",
        "isExtraImport": true,
        "detail": "src.models.class_time",
        "documentation": {}
    },
    {
        "label": "CreateClassTimeRequest",
        "importPath": "src.models.class_time",
        "description": "src.models.class_time",
        "isExtraImport": true,
        "detail": "src.models.class_time",
        "documentation": {}
    },
    {
        "label": "ClassTime",
        "importPath": "src.models.class_time",
        "description": "src.models.class_time",
        "isExtraImport": true,
        "detail": "src.models.class_time",
        "documentation": {}
    },
    {
        "label": "CreateClassTimeRequest",
        "importPath": "src.models.class_time",
        "description": "src.models.class_time",
        "isExtraImport": true,
        "detail": "src.models.class_time",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "AcademicPeriodService",
        "importPath": "src.services.academic_period",
        "description": "src.services.academic_period",
        "isExtraImport": true,
        "detail": "src.services.academic_period",
        "documentation": {}
    },
    {
        "label": "CampusService",
        "importPath": "src.services.campus",
        "description": "src.services.campus",
        "isExtraImport": true,
        "detail": "src.services.campus",
        "documentation": {}
    },
    {
        "label": "CareerService",
        "importPath": "src.services.career",
        "description": "src.services.career",
        "isExtraImport": true,
        "detail": "src.services.career",
        "documentation": {}
    },
    {
        "label": "CareerCampusService",
        "importPath": "src.services.career_campus",
        "description": "src.services.career_campus",
        "isExtraImport": true,
        "detail": "src.services.career_campus",
        "documentation": {}
    },
    {
        "label": "CareerPeriodService",
        "importPath": "src.services.career_period",
        "description": "src.services.career_period",
        "isExtraImport": true,
        "detail": "src.services.career_period",
        "documentation": {}
    },
    {
        "label": "CareerTeacherService",
        "importPath": "src.services.career_teacher",
        "description": "src.services.career_teacher",
        "isExtraImport": true,
        "detail": "src.services.career_teacher",
        "documentation": {}
    },
    {
        "label": "ClassroomService",
        "importPath": "src.services.classroom",
        "description": "src.services.classroom",
        "isExtraImport": true,
        "detail": "src.services.classroom",
        "documentation": {}
    },
    {
        "label": "ClassTimeService",
        "importPath": "src.services.class_time",
        "description": "src.services.class_time",
        "isExtraImport": true,
        "detail": "src.services.class_time",
        "documentation": {}
    },
    {
        "label": "CourseService",
        "importPath": "src.services.course",
        "description": "src.services.course",
        "isExtraImport": true,
        "detail": "src.services.course",
        "documentation": {}
    },
    {
        "label": "ModalityService",
        "importPath": "src.services.modality",
        "description": "src.services.modality",
        "isExtraImport": true,
        "detail": "src.services.modality",
        "documentation": {}
    },
    {
        "label": "RoomBlockService",
        "importPath": "src.services.room_block",
        "description": "src.services.room_block",
        "isExtraImport": true,
        "detail": "src.services.room_block",
        "documentation": {}
    },
    {
        "label": "SectionService",
        "importPath": "src.services.section",
        "description": "src.services.section",
        "isExtraImport": true,
        "detail": "src.services.section",
        "documentation": {}
    },
    {
        "label": "SectionTeacherService",
        "importPath": "src.services.section_teacher",
        "description": "src.services.section_teacher",
        "isExtraImport": true,
        "detail": "src.services.section_teacher",
        "documentation": {}
    },
    {
        "label": "SectionWeeksService",
        "importPath": "src.services.section_weeks",
        "description": "src.services.section_weeks",
        "isExtraImport": true,
        "detail": "src.services.section_weeks",
        "documentation": {}
    },
    {
        "label": "TeacherService",
        "importPath": "src.services.teacher",
        "description": "src.services.teacher",
        "isExtraImport": true,
        "detail": "src.services.teacher",
        "documentation": {}
    },
    {
        "label": "TeacherTimeService",
        "importPath": "src.services.teacher_time",
        "description": "src.services.teacher_time",
        "isExtraImport": true,
        "detail": "src.services.teacher_time",
        "documentation": {}
    },
    {
        "label": "TimeBlockService",
        "importPath": "src.services.time_block",
        "description": "src.services.time_block",
        "isExtraImport": true,
        "detail": "src.services.time_block",
        "documentation": {}
    },
    {
        "label": "WeekService",
        "importPath": "src.services.week",
        "description": "src.services.week",
        "isExtraImport": true,
        "detail": "src.services.week",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.career",
        "description": "src.routers.career",
        "isExtraImport": true,
        "detail": "src.routers.career",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.campus",
        "description": "src.routers.campus",
        "isExtraImport": true,
        "detail": "src.routers.campus",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.classroom",
        "description": "src.routers.classroom",
        "isExtraImport": true,
        "detail": "src.routers.classroom",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.course",
        "description": "src.routers.course",
        "isExtraImport": true,
        "detail": "src.routers.course",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.modality",
        "description": "src.routers.modality",
        "isExtraImport": true,
        "detail": "src.routers.modality",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.section",
        "description": "src.routers.section",
        "isExtraImport": true,
        "detail": "src.routers.section",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.teacher",
        "description": "src.routers.teacher",
        "isExtraImport": true,
        "detail": "src.routers.teacher",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.time_block",
        "description": "src.routers.time_block",
        "isExtraImport": true,
        "detail": "src.routers.time_block",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.section_weeks",
        "description": "src.routers.section_weeks",
        "isExtraImport": true,
        "detail": "src.routers.section_weeks",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.room_block",
        "description": "src.routers.room_block",
        "isExtraImport": true,
        "detail": "src.routers.room_block",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.section_teacher",
        "description": "src.routers.section_teacher",
        "isExtraImport": true,
        "detail": "src.routers.section_teacher",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.career_period",
        "description": "src.routers.career_period",
        "isExtraImport": true,
        "detail": "src.routers.career_period",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.career_campus",
        "description": "src.routers.career_campus",
        "isExtraImport": true,
        "detail": "src.routers.career_campus",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.teacher_time",
        "description": "src.routers.teacher_time",
        "isExtraImport": true,
        "detail": "src.routers.teacher_time",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.routers.class_time",
        "description": "src.routers.class_time",
        "isExtraImport": true,
        "detail": "src.routers.class_time",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.66c2be46210d_add_classtime_model_and_relationships",
        "description": "alembic.versions.66c2be46210d_add_classtime_model_and_relationships",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.66c2be46210d_add_classtime_model_and_relationships",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.66c2be46210d_add_classtime_model_and_relationships",
        "description": "alembic.versions.66c2be46210d_add_classtime_model_and_relationships",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.66c2be46210d_add_classtime_model_and_relationships",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.6efb885142c4_fix_classtime_model_and_relationships",
        "description": "alembic.versions.6efb885142c4_fix_classtime_model_and_relationships",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('class_time',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('class_room_id', sa.Integer(), nullable=True),\n    sa.Column('time_block_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['class_room_id'], ['classrooms.id'], ),\n    sa.ForeignKeyConstraint(['time_block_id'], ['time_blocks.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "alembic.versions.6efb885142c4_fix_classtime_model_and_relationships",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.6efb885142c4_fix_classtime_model_and_relationships",
        "description": "alembic.versions.6efb885142c4_fix_classtime_model_and_relationships",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_class_time_time_block_id'), table_name='class_time')\n    op.drop_index(op.f('ix_class_time_id'), table_name='class_time')\n    op.drop_index(op.f('ix_class_time_class_room_id'), table_name='class_time')\n    op.drop_table('class_time')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.6efb885142c4_fix_classtime_model_and_relationships",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.ad20255a4062_first_migración",
        "description": "alembic.versions.ad20255a4062_first_migración",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('academic_period',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=True),\n    sa.Column('year', sa.Integer(), nullable=True),\n    sa.Column('number', sa.Integer(), nullable=True),\n    sa.Column('actual', sa.Boolean(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "alembic.versions.ad20255a4062_first_migración",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.ad20255a4062_first_migración",
        "description": "alembic.versions.ad20255a4062_first_migración",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_teacher_time_time_block_id'), table_name='teacher_time')\n    op.drop_index(op.f('ix_teacher_time_teacher_id'), table_name='teacher_time')\n    op.drop_index(op.f('ix_teacher_time_id'), table_name='teacher_time')\n    op.drop_index(op.f('ix_teacher_time_academic_period_id'), table_name='teacher_time')\n    op.drop_table('teacher_time')\n    op.drop_index(op.f('ix_section_weeks_week_id'), table_name='section_weeks')\n    op.drop_index(op.f('ix_section_weeks_section_id'), table_name='section_weeks')\n    op.drop_index(op.f('ix_section_weeks_id'), table_name='section_weeks')",
        "detail": "alembic.versions.ad20255a4062_first_migración",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.b355b49bf2fa_add_careerteacher_model",
        "description": "alembic.versions.b355b49bf2fa_add_careerteacher_model",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('career_teacher',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('career_id', sa.Integer(), nullable=True),\n    sa.Column('teacher_id', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['career_id'], ['careers.id'], ),\n    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "alembic.versions.b355b49bf2fa_add_careerteacher_model",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.b355b49bf2fa_add_careerteacher_model",
        "description": "alembic.versions.b355b49bf2fa_add_careerteacher_model",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_career_teacher_teacher_id'), table_name='career_teacher')\n    op.drop_index(op.f('ix_career_teacher_id'), table_name='career_teacher')\n    op.drop_index(op.f('ix_career_teacher_career_id'), table_name='career_teacher')\n    op.drop_table('career_teacher')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.b355b49bf2fa_add_careerteacher_model",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Ejecuta las migraciones en modo offline.\"\"\"\n    context.configure(\n        url=DATABASE_URL,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n    with context.begin_transaction():\n        context.run_migrations()",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Ejecuta las migraciones en modo online.\"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n    with connectable.connect() as connection:\n        context.configure(connection=connection, target_metadata=target_metadata)\n        with context.begin_transaction():",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "DATABASE_URL = os.getenv(\"URL_DATABASE\")\nif DATABASE_URL is None:\n    raise ValueError(\n        \"La variable de entorno URL_DATABASE no está definida en el archivo .env\"\n    )\n# Obtener configuración de Alembic\nconfig = context.config\nconfig.set_main_option(\"sqlalchemy.url\", DATABASE_URL)\n# Configurar logging si se define en alembic.ini\nif config.config_file_name is not None:",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\", DATABASE_URL)\n# Configurar logging si se define en alembic.ini\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# Metadata para autogeneración de migraciones\ntarget_metadata = Base.metadata\ndef run_migrations_offline() -> None:\n    \"\"\"Ejecuta las migraciones en modo offline.\"\"\"\n    context.configure(",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\ndef run_migrations_offline() -> None:\n    \"\"\"Ejecuta las migraciones en modo offline.\"\"\"\n    context.configure(\n        url=DATABASE_URL,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n    with context.begin_transaction():",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "AcademicPeriod",
        "kind": 6,
        "importPath": "src.models.academic_period",
        "description": "src.models.academic_period",
        "peekOfCode": "class AcademicPeriod(Base):\n    __tablename__ = \"academic_period\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n    year = Column(Integer, index=True)\n    number = Column(Integer, index=True)\n    actual = Column(Boolean, index=True)\n    sections = relationship(\"Section\", back_populates=\"academic_period\")\n    weeks = relationship(\"Weeks\", back_populates=\"academic_period\")\n    career_periods = relationship(\"CareerPeriod\", back_populates=\"period\")",
        "detail": "src.models.academic_period",
        "documentation": {}
    },
    {
        "label": "CreateAcademicPeriodRequest",
        "kind": 6,
        "importPath": "src.models.academic_period",
        "description": "src.models.academic_period",
        "peekOfCode": "class CreateAcademicPeriodRequest(BaseModel):\n    name: String\n    year: Integer\n    number: Integer\n    actual: Boolean\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [",
        "detail": "src.models.academic_period",
        "documentation": {}
    },
    {
        "label": "Campus",
        "kind": 6,
        "importPath": "src.models.campus",
        "description": "src.models.campus",
        "peekOfCode": "class Campus(Base):  # Modelo para la base de datos\n    __tablename__ = \"campus\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)  # Ejemplo: \"UNEG VILLA ASIA\"\n    location = Column(String, index=True)  # Ejemplo: \"PUERTO ORDAZ\"\n    career_campuses = relationship(\"CareerCampus\", back_populates=\"campus\")\n    classrooms = relationship(\"Classroom\", back_populates=\"campus\")\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,",
        "detail": "src.models.campus",
        "documentation": {}
    },
    {
        "label": "CreateCampusRequest",
        "kind": 6,
        "importPath": "src.models.campus",
        "description": "src.models.campus",
        "peekOfCode": "class CreateCampusRequest(BaseModel):  # Modelo para validación y entrada\n    name: str\n    location: str\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\"name\": \"UNEG VILLA ASIA\", \"location\": \"PUERTO ORDAZ\"},\n            ]",
        "detail": "src.models.campus",
        "documentation": {}
    },
    {
        "label": "Career",
        "kind": 6,
        "importPath": "src.models.career",
        "description": "src.models.career",
        "peekOfCode": "class Career(Base):\n    __tablename__ = \"careers\"\n    id = Column(Integer, primary_key=True, index=True)\n    fullname = Column(String, index=True)\n    career_periods = relationship(\"CareerPeriod\", back_populates=\"career\")\n    career_campuses = relationship(\"CareerCampus\", back_populates=\"career\")\n    career_teachers = relationship(\"CareerTeacher\", back_populates=\"teacher\")\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,",
        "detail": "src.models.career",
        "documentation": {}
    },
    {
        "label": "CreateCareerRequest",
        "kind": 6,
        "importPath": "src.models.career",
        "description": "src.models.career",
        "peekOfCode": "class CreateCareerRequest(BaseModel):\n    fullname: str\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"fullname\": \"Ingenieria en Informatica\",\n                }",
        "detail": "src.models.career",
        "documentation": {}
    },
    {
        "label": "CareerCampus",
        "kind": 6,
        "importPath": "src.models.career_campus",
        "description": "src.models.career_campus",
        "peekOfCode": "class CareerCampus(Base):\n    __tablename__ = \"career_campus\"\n    id = Column(Integer, primary_key=True, index=True)\n    career_id = Column(Integer, ForeignKey(\"careers.id\"), index=True)\n    campus_id = Column(Integer, ForeignKey(\"campus.id\"), index=True)\n    # Relaciones (Opcional)\n    career = relationship(\"Career\", back_populates=\"career_campuses\")\n    campus = relationship(\"Campus\", back_populates=\"career_campuses\")\nclass CreateCareerCampusRequest(BaseModel):\n    career_id: int",
        "detail": "src.models.career_campus",
        "documentation": {}
    },
    {
        "label": "CreateCareerCampusRequest",
        "kind": 6,
        "importPath": "src.models.career_campus",
        "description": "src.models.career_campus",
        "peekOfCode": "class CreateCareerCampusRequest(BaseModel):\n    career_id: int\n    campus_id: int",
        "detail": "src.models.career_campus",
        "documentation": {}
    },
    {
        "label": "CareerPeriod",
        "kind": 6,
        "importPath": "src.models.career_period",
        "description": "src.models.career_period",
        "peekOfCode": "class CareerPeriod(Base):\n    __tablename__ = \"career_period\"\n    id = Column(Integer, primary_key=True, index=True)\n    career_id = Column(Integer, ForeignKey(\"careers.id\"), index=True)\n    period_id = Column(Integer, ForeignKey(\"academic_period.id\"), index=True)\n    schedule_generated = Column(Boolean, default=False)\n    # Relaciones (Opcional, si necesitas acceder a Career y Period desde Career_Period)\n    career = relationship(\"Career\", back_populates=\"career_periods\")\n    period = relationship(\"AcademicPeriod\", back_populates=\"career_periods\")\n    model_config = {",
        "detail": "src.models.career_period",
        "documentation": {}
    },
    {
        "label": "CreateCareerPeriodRequest",
        "kind": 6,
        "importPath": "src.models.career_period",
        "description": "src.models.career_period",
        "peekOfCode": "class CreateCareerPeriodRequest(BaseModel):\n    career_id: int\n    period_id: int\n    schedule_generated: bool = False\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\"career_id\": 1, \"period_id\": 2, \"schedule_generated\": \"false\"},",
        "detail": "src.models.career_period",
        "documentation": {}
    },
    {
        "label": "CareerTeacher",
        "kind": 6,
        "importPath": "src.models.career_teacher",
        "description": "src.models.career_teacher",
        "peekOfCode": "class CareerTeacher(Base):\n    __tablename__ = \"career_teacher\"\n    id = Column(Integer, primary_key=True, index=True)\n    career_id = Column(Integer, ForeignKey(\"careers.id\"), index=True)\n    teacher_id = Column(Integer, ForeignKey(\"teachers.id\"), index=True)\n    career = relationship(\"Career\", back_populates=\"career_teachers\")\n    teacher = relationship(\"Teacher\", back_populates=\"career_teachers\")\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,",
        "detail": "src.models.career_teacher",
        "documentation": {}
    },
    {
        "label": "CreateCareerTeacherRequest",
        "kind": 6,
        "importPath": "src.models.career_teacher",
        "description": "src.models.career_teacher",
        "peekOfCode": "class CreateCareerTeacherRequest(BaseModel):\n    career_id: int\n    teacher_id: int\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"career_id\": 1,",
        "detail": "src.models.career_teacher",
        "documentation": {}
    },
    {
        "label": "Classroom",
        "kind": 6,
        "importPath": "src.models.classroom",
        "description": "src.models.classroom",
        "peekOfCode": "class Classroom(Base):\n    __tablename__ = \"classrooms\"\n    id = Column(Integer, primary_key=True, index=True)\n    nombre = Column(String, index=True)\n    capacidad = Column(Integer, index=True)\n    ubicacion = Column(String, index=True)\n    campus = relationship(\"Campus\", back_populates=\"classrooms\")\n    class_times = relationship(\"ClassTime\", back_populates=\"class_room\")\nclass CreateClassroomRequest(BaseModel):\n    nombre: str",
        "detail": "src.models.classroom",
        "documentation": {}
    },
    {
        "label": "CreateClassroomRequest",
        "kind": 6,
        "importPath": "src.models.classroom",
        "description": "src.models.classroom",
        "peekOfCode": "class CreateClassroomRequest(BaseModel):\n    nombre: str\n    capacidad: int = 0\n    ubicacion: str\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {",
        "detail": "src.models.classroom",
        "documentation": {}
    },
    {
        "label": "ClassTime",
        "kind": 6,
        "importPath": "src.models.class_time",
        "description": "src.models.class_time",
        "peekOfCode": "class ClassTime(Base):\n    __tablename__ = \"class_time\"\n    id = Column(Integer, primary_key=True, index=True)\n    class_room_id = Column(Integer, ForeignKey(\"classrooms.id\"), index=True)\n    time_block_id = Column(Integer, ForeignKey(\"time_blocks.id\"), index=True)\n    available = Column(Boolean, default=True)\n    class_room = relationship(\"ClassRoom\", back_populates=\"class_times\")\n    time_block = relationship(\"TimeBlock\", back_populates=\"class_times\")\n    model_config = {\n        \"from_attributes\": True,",
        "detail": "src.models.class_time",
        "documentation": {}
    },
    {
        "label": "CreateClassTimeRequest",
        "kind": 6,
        "importPath": "src.models.class_time",
        "description": "src.models.class_time",
        "peekOfCode": "class CreateClassTimeRequest(BaseModel):\n    class_room_id: int\n    time_block_id: int\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"class_room_id\": 1,",
        "detail": "src.models.class_time",
        "documentation": {}
    },
    {
        "label": "Course",
        "kind": 6,
        "importPath": "src.models.course",
        "description": "src.models.course",
        "peekOfCode": "class Course(Base):\n    __tablename__ = \"courses\"\n    id = Column(Integer, primary_key=True, index=True)\n    career_id = Column(Integer, ForeignKey(\"careers.id\"), index=True)\n    name = Column(String, index=True)\n    active = Column(Boolean, index=True)\n    at_laboratory = Column(Boolean, index=True)\n    sections = relationship(\"Section\", back_populates=\"course\")\n    # Configuración de ejemplos (opcional, no es estándar de SQLAlchemy)\n    __example__ = {",
        "detail": "src.models.course",
        "documentation": {}
    },
    {
        "label": "CreateCourseRequest",
        "kind": 6,
        "importPath": "src.models.course",
        "description": "src.models.course",
        "peekOfCode": "class CreateCourseRequest(BaseModel):  # Modelo para validación y entrada\n    career_id: int\n    name: str\n    active: bool\n    at_laboratory: bool\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [",
        "detail": "src.models.course",
        "documentation": {}
    },
    {
        "label": "Hours",
        "kind": 6,
        "importPath": "src.models.hours",
        "description": "src.models.hours",
        "peekOfCode": "class Hours(Base):\n    __tablename__ = \"hours\"\n    id = Column(Integer, primary_key = True, index = True)\n    name = Column(String, index = True)\n    start = Column(String, index = True)\n    end = Column(String, index = True)\n    time_block = relationship(\"TimeBlock\", back_populates = \"hours\")\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,",
        "detail": "src.models.hours",
        "documentation": {}
    },
    {
        "label": "CreateHoursRequest",
        "kind": 6,
        "importPath": "src.models.hours",
        "description": "src.models.hours",
        "peekOfCode": "class CreateHoursRequest(BaseModel):\n    name: String\n    start: String\n    end: String\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {",
        "detail": "src.models.hours",
        "documentation": {}
    },
    {
        "label": "Modality",
        "kind": 6,
        "importPath": "src.models.modality",
        "description": "src.models.modality",
        "peekOfCode": "class Modality(Base):\n    __tablename__ = \"modality\"\n    id = Column(Integer, primary_key=True, index=True)  # Identificador único\n    name = Column(String, unique=True, nullable=False, index=True)  # Nombre de la modalidad\n    sections = relationship(\"Section\", back_populates=\"modality\")\n    # Configuración adicional para generar esquemas JSON de ejemplo\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {",
        "detail": "src.models.modality",
        "documentation": {}
    },
    {
        "label": "CreateModalityRequest",
        "kind": 6,
        "importPath": "src.models.modality",
        "description": "src.models.modality",
        "peekOfCode": "class CreateModalityRequest(BaseModel):\n    name: str  # Nombre de la modalidad (obligatorio)\n    # Configuración adicional para generar esquemas JSON de ejemplo\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\"name\": \"Online\"},\n                {\"name\": \"In-person\"}",
        "detail": "src.models.modality",
        "documentation": {}
    },
    {
        "label": "RoomBlock",
        "kind": 6,
        "importPath": "src.models.room_block",
        "description": "src.models.room_block",
        "peekOfCode": "class RoomBlock(Base):\n    __tablename__ = \"room_blocks\"\n    id = Column(Integer, primary_key=True, index=True)  # Identificador único\n    block_id = Column(\n        Integer, ForeignKey(\"time_blocks.id\"), index=True\n    )  # Relación con la tabla \"bloque_clases\"\n    room_id = Column(\n        Integer, ForeignKey(\"classrooms.id\"), index=True\n    )  # Relación con la tabla \"salones\n    available = Column(Boolean, default=True)  # Indica si está disponible",
        "detail": "src.models.room_block",
        "documentation": {}
    },
    {
        "label": "CreateRoomBlockRequest",
        "kind": 6,
        "importPath": "src.models.room_block",
        "description": "src.models.room_block",
        "peekOfCode": "class CreateRoomBlockRequest(BaseModel):\n    block_id: int  # ID del bloque\n    room_id: int  # ID del salón\n    available: bool = True  # Disponible por defecto\n    # Configuración para generar ejemplos JSON\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [",
        "detail": "src.models.room_block",
        "documentation": {}
    },
    {
        "label": "Section",
        "kind": 6,
        "importPath": "src.models.section",
        "description": "src.models.section",
        "peekOfCode": "class Section(Base):\n    __tablename__ = \"sections\"\n    id = Column(Integer, primary_key=True, index=True)\n    course_id = Column(Integer, ForeignKey(\"courses.id\"), index=True)\n    modality_id = Column(Integer, ForeignKey(\"modality.id\"), index=True)\n    academic_period_id = Column(Integer, ForeignKey(\"academic_period.id\"), index=True)\n    name = Column(Integer, index=True)\n    # Relaciones\n    course = relationship(\"Course\", back_populates=\"sections\")\n    modality = relationship(\"Modality\", back_populates=\"sections\")",
        "detail": "src.models.section",
        "documentation": {}
    },
    {
        "label": "CreateSectionRequest",
        "kind": 6,
        "importPath": "src.models.section",
        "description": "src.models.section",
        "peekOfCode": "class CreateSectionRequest(BaseModel):\n    course_id: int\n    modality_id: int\n    academic_period_id: int\n    name: int\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [",
        "detail": "src.models.section",
        "documentation": {}
    },
    {
        "label": "SectionTeacher",
        "kind": 6,
        "importPath": "src.models.section_teacher",
        "description": "src.models.section_teacher",
        "peekOfCode": "class SectionTeacher(Base):\n    __tablename__ = \"section_teacher\"\n    id = Column(Integer, primary_key=True, index=True)\n    section_id = Column(Integer, ForeignKey(\"sections.id\"), index=True)\n    teacher_id = Column(Integer, ForeignKey(\"teachers.id\"), index=True)\n    assigned_hours = Column(Integer, index=True)\n    # Relaciones\n    section = relationship(\"Section\", back_populates=\"teacher_section\")\n    teacher = relationship(\"Teacher\", back_populates=\"teacher_section\")\n    model_config = {",
        "detail": "src.models.section_teacher",
        "documentation": {}
    },
    {
        "label": "CreateSectionTeacherRequest",
        "kind": 6,
        "importPath": "src.models.section_teacher",
        "description": "src.models.section_teacher",
        "peekOfCode": "class CreateSectionTeacherRequest(BaseModel):\n    section_id: int\n    teacher_id: int\n    assigned_hours: int\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\"section_id\": 1, \"teacher_id\": 2, \"assigned_hours\": 3},",
        "detail": "src.models.section_teacher",
        "documentation": {}
    },
    {
        "label": "SectionWeeks",
        "kind": 6,
        "importPath": "src.models.section_weeks",
        "description": "src.models.section_weeks",
        "peekOfCode": "class SectionWeeks(Base):\n    __tablename__ = \"section_weeks\"\n    id = Column(Integer, primary_key=True, index=True)\n    section_id = Column(Integer, ForeignKey(\"sections.id\"), index=True)\n    week_id = Column(Integer, ForeignKey(\"weeks.id\"), index=True)\n    # Relaciones\n    section = relationship(\"Section\", back_populates=\"section_weeks\")\n    week = relationship(\"Weeks\", back_populates=\"section_weeks\")\n    model_config = {\n        \"from_attributes\": True,",
        "detail": "src.models.section_weeks",
        "documentation": {}
    },
    {
        "label": "CreateSectionWeeksRequest",
        "kind": 6,
        "importPath": "src.models.section_weeks",
        "description": "src.models.section_weeks",
        "peekOfCode": "class CreateSectionWeeksRequest(BaseModel):\n    section_id: int\n    week_id: int\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"section_id\": \"1\",",
        "detail": "src.models.section_weeks",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "kind": 6,
        "importPath": "src.models.teacher",
        "description": "src.models.teacher",
        "peekOfCode": "class Teacher(Base):\n    __tablename__ = \"teachers\"\n    id = Column(Integer, primary_key=True, index=True)\n    first_name = Column(String, index=True)\n    last_name = Column(String, index=True)\n    # Relaciones\n    teacher_section = relationship(\"SectionTeacher\", back_populates=\"teacher\")\n    teacher_times = relationship(\"TeacherTime\", back_populates=\"teacher\")\n    career_teachers = relationship(\"Teacher\", back_populates=\"teacher\")\n    model_config = {",
        "detail": "src.models.teacher",
        "documentation": {}
    },
    {
        "label": "CreateTeacherRequest",
        "kind": 6,
        "importPath": "src.models.teacher",
        "description": "src.models.teacher",
        "peekOfCode": "class CreateTeacherRequest(BaseModel):\n    first_name: str\n    last_name: str\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\"first_name\": \"Juan\", \"last_name\": \"Pedro\"},\n            ]",
        "detail": "src.models.teacher",
        "documentation": {}
    },
    {
        "label": "TeacherTime",
        "kind": 6,
        "importPath": "src.models.teacher_time",
        "description": "src.models.teacher_time",
        "peekOfCode": "class TeacherTime(Base):\n    __tablename__ = \"teacher_time\"\n    id = Column(Integer, primary_key=True, index=True)\n    teacher_id = Column(Integer, ForeignKey(\"teachers.id\"), index=True)\n    time_block_id = Column(Integer, ForeignKey(\"time_blocks.id\"), index=True)\n    academic_period_id = Column(Integer, ForeignKey(\"academic_period.id\"), index=True)\n    available = Column(Boolean, default=True)\n    teacher = relationship(\"Teacher\", back_populates=\"teacher_times\")\n    time_block = relationship(\"TimeBlock\", back_populates=\"teacher_times\")\n    academic_period = relationship(\"AcademicPeriod\", back_populates=\"teacher_times\")",
        "detail": "src.models.teacher_time",
        "documentation": {}
    },
    {
        "label": "CreateTeacherTimeRequest",
        "kind": 6,
        "importPath": "src.models.teacher_time",
        "description": "src.models.teacher_time",
        "peekOfCode": "class CreateTeacherTimeRequest(BaseModel):\n    teacher_id: int\n    time_block_id: int\n    academic_period_id: int\n    available: bool = True\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [",
        "detail": "src.models.teacher_time",
        "documentation": {}
    },
    {
        "label": "TimeBlock",
        "kind": 6,
        "importPath": "src.models.time_block",
        "description": "src.models.time_block",
        "peekOfCode": "class TimeBlock(Base):\n    __tablename__ = \"time_blocks\"\n    id = Column(Integer, primary_key=True, index=True)\n    hour_id = Column(Integer, ForeignKey(\"hours.id\"), index=True)\n    week_id = Column(Integer, ForeignKey(\"weeks.id\"), index=True)\n    day = Column(Integer, index=True)\n    hours = relationship(\"Hours\", back_populates=\"time_block\")\n    weeks = relationship(\"Weeks\", back_populates=\"time_block\")\n    teacher_times = relationship(\"TeacherTime\", back_populates=\"time_block\")\n    class_times = relationship(\"ClassTime\", back_populates=\"time_block\")",
        "detail": "src.models.time_block",
        "documentation": {}
    },
    {
        "label": "CreateTimeBlockRequest",
        "kind": 6,
        "importPath": "src.models.time_block",
        "description": "src.models.time_block",
        "peekOfCode": "class CreateTimeBlockRequest(BaseModel):\n    hour_id: int\n    week_id: int\n    day: int\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {",
        "detail": "src.models.time_block",
        "documentation": {}
    },
    {
        "label": "Week",
        "kind": 6,
        "importPath": "src.models.week",
        "description": "src.models.week",
        "peekOfCode": "class Week(Base):\n    __tablename__ = \"weeks\"\n    id = Column(Integer, primary_key=True, index=True)\n    period_id = Column(Integer, ForeignKey(\"academic_period.id\"), index=True)\n    number = Column(Integer, index=True)\n    academic_period = relationship(\"AcademicPeriod\", back_populates=\"week\")\n    time_block = relationship(\"TimeBlock\", back_populates=\"week\")\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,",
        "detail": "src.models.week",
        "documentation": {}
    },
    {
        "label": "CreateWeekRequest",
        "kind": 6,
        "importPath": "src.models.week",
        "description": "src.models.week",
        "peekOfCode": "class CreateWeekRequest(BaseModel):\n    period_id: Integer\n    number: Integer\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"period_id\": \"null\",",
        "detail": "src.models.week",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.academic_period",
        "description": "src.routers.academic_period",
        "peekOfCode": "router = APIRouter(prefix=\"/academic_period\", tags=[\"Academic Period\"])\n@router.post(\"\")\nasync def create_academic_period(\n    academic_period_request: CreateAcademicPeriodRequest, db: Session = Depends(get_db)\n):\n    academic_period_service = AcademicPeriodService(db)\n    return academic_period_service.create_academic_period(academic_period_request)\n@router.get(\"\")\nasync def get_all_academic_periods(db: Session = Depends(get_db)):\n    academic_period_service = AcademicPeriodService(db)",
        "detail": "src.routers.academic_period",
        "documentation": {}
    },
    {
        "label": "sede_service",
        "kind": 5,
        "importPath": "src.routers.campus",
        "description": "src.routers.campus",
        "peekOfCode": "sede_service = CampusService\nrouter = APIRouter(prefix=\"/sede\", tags=[\"Sede\"])\n@router.post(\"\")\nasync def create_sede(sede_request: CreateCampusRequest):\n    return sede_service.create_sede(sede_request)\n@router.get(\"\")\nasync def get_all_sedes():\n    return sede_service.get_all_sedes\n@router.get(\"/{sede_id}\")\nasync def get_sede_by_id(sede_id: int):",
        "detail": "src.routers.campus",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.campus",
        "description": "src.routers.campus",
        "peekOfCode": "router = APIRouter(prefix=\"/sede\", tags=[\"Sede\"])\n@router.post(\"\")\nasync def create_sede(sede_request: CreateCampusRequest):\n    return sede_service.create_sede(sede_request)\n@router.get(\"\")\nasync def get_all_sedes():\n    return sede_service.get_all_sedes\n@router.get(\"/{sede_id}\")\nasync def get_sede_by_id(sede_id: int):\n    return sede_service.get_sede_by_id(sede_id)",
        "detail": "src.routers.campus",
        "documentation": {}
    },
    {
        "label": "career_service",
        "kind": 5,
        "importPath": "src.routers.career",
        "description": "src.routers.career",
        "peekOfCode": "career_service = CareerService\nrouter = APIRouter(\n    prefix=\"/career\",\n    tags=['Career']\n)\n@router.post(\"\")\nasync def create_career(career_request: CreateCareerRequest):\n    return career_service.create_career(career_request)\n@router.get(\"\")\nasync def get_all_career():",
        "detail": "src.routers.career",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.career",
        "description": "src.routers.career",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/career\",\n    tags=['Career']\n)\n@router.post(\"\")\nasync def create_career(career_request: CreateCareerRequest):\n    return career_service.create_career(career_request)\n@router.get(\"\")\nasync def get_all_career():\n    return career_service.get_all_careers",
        "detail": "src.routers.career",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.career_campus",
        "description": "src.routers.career_campus",
        "peekOfCode": "router = APIRouter(prefix=\"/career_campus\", tags=[\"Career Campus\"])\n@router.post(\"\")\nasync def create_career_campus(\n    career_campus_request: CreateCareerCampusRequest, db: Session = Depends(get_db)\n):\n    career_campus_service = CareerCampusService(db)\n    return career_campus_service.create_career_campus(career_campus_request)\n@router.get(\"\")\nasync def get_all_career_campuses(db: Session = Depends(get_db)):\n    career_campus_service = CareerCampusService(db)",
        "detail": "src.routers.career_campus",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.career_period",
        "description": "src.routers.career_period",
        "peekOfCode": "router = APIRouter(prefix=\"/career_period\", tags=[\"Career Period\"])\n@router.post(\"\")\nasync def create_career_period(\n    career_period_request: CreateCareerPeriodRequest, db: Session = Depends(get_db)\n):\n    career_period_service = CareerPeriodService(db)\n    return career_period_service.create_career_period(career_period_request)\n@router.get(\"\")\nasync def get_all_career_periods(db: Session = Depends(get_db)):\n    career_period_service = CareerPeriodService(db)",
        "detail": "src.routers.career_period",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.career_teacher",
        "description": "src.routers.career_teacher",
        "peekOfCode": "router = APIRouter(prefix=\"/career_teacher\", tags=[\"Career Teacher\"])\n@router.post(\"\")\nasync def create_career_teacher(\n    career_teacher_request: CreateCareerTeacherRequest, db: Session = Depends(get_db)\n):\n    career_teacher_service = CareerTeacherService(db)\n    return career_teacher_service.create_career_teacher(career_teacher_request)\n@router.get(\"\")\nasync def get_all_career_teachers(db: Session = Depends(get_db)):\n    career_teacher_service = CareerTeacherService(db)",
        "detail": "src.routers.career_teacher",
        "documentation": {}
    },
    {
        "label": "crear_Classroom",
        "kind": 2,
        "importPath": "src.routers.classroom",
        "description": "src.routers.classroom",
        "peekOfCode": "def crear_Classroom(Classroom: CreateClassroomRequest):\n    respuesta = Classroom_service.create_Classroom(Classroom)\n    return respuesta\n# Leer todos los Classroomes\n@router.get(\"\")\ndef obtener_Classroomes():\n    respuesta = Classroom_service.get_all_Classroomes()\n    return respuesta\n# Leer un salón por ID\n@router.get(\"/{Classroom_id}\")",
        "detail": "src.routers.classroom",
        "documentation": {}
    },
    {
        "label": "obtener_Classroomes",
        "kind": 2,
        "importPath": "src.routers.classroom",
        "description": "src.routers.classroom",
        "peekOfCode": "def obtener_Classroomes():\n    respuesta = Classroom_service.get_all_Classroomes()\n    return respuesta\n# Leer un salón por ID\n@router.get(\"/{Classroom_id}\")\ndef obtener_Classroom(Classroom_id: int):\n    respuesta = Classroom_service.get_Classroom_by_id(Classroom_id)\n    if respuesta:\n        return respuesta\n    raise HTTPException(status_code=404, detail=\"Salón no encontrado\")",
        "detail": "src.routers.classroom",
        "documentation": {}
    },
    {
        "label": "obtener_Classroom",
        "kind": 2,
        "importPath": "src.routers.classroom",
        "description": "src.routers.classroom",
        "peekOfCode": "def obtener_Classroom(Classroom_id: int):\n    respuesta = Classroom_service.get_Classroom_by_id(Classroom_id)\n    if respuesta:\n        return respuesta\n    raise HTTPException(status_code=404, detail=\"Salón no encontrado\")\n# Actualizar un salón\n@router.put(\"/{Classroom_id}\")\ndef actualizar_Classroom(Classroom_id: int, Classroom: CreateClassroomRequest):\n    respuesta = Classroom_service.update_Classroom(Classroom_id, Classroom)\n    return respuesta",
        "detail": "src.routers.classroom",
        "documentation": {}
    },
    {
        "label": "actualizar_Classroom",
        "kind": 2,
        "importPath": "src.routers.classroom",
        "description": "src.routers.classroom",
        "peekOfCode": "def actualizar_Classroom(Classroom_id: int, Classroom: CreateClassroomRequest):\n    respuesta = Classroom_service.update_Classroom(Classroom_id, Classroom)\n    return respuesta\n# Borrar un salón\n@router.delete(\"/{Classroom_id}\")\ndef borrar_Classroom(Classroom_id: int):\n    respuesta = Classroom_service.delete_Classroom(Classroom_id)\n    return respuesta",
        "detail": "src.routers.classroom",
        "documentation": {}
    },
    {
        "label": "borrar_Classroom",
        "kind": 2,
        "importPath": "src.routers.classroom",
        "description": "src.routers.classroom",
        "peekOfCode": "def borrar_Classroom(Classroom_id: int):\n    respuesta = Classroom_service.delete_Classroom(Classroom_id)\n    return respuesta",
        "detail": "src.routers.classroom",
        "documentation": {}
    },
    {
        "label": "Classroom_service",
        "kind": 5,
        "importPath": "src.routers.classroom",
        "description": "src.routers.classroom",
        "peekOfCode": "Classroom_service = ClassroomService\nrouter = APIRouter(\n    prefix=\"/Classroom\",\n    tags=['Classrooms']\n)\n# Crear un nuevo salón\n@router.post(\"\", status_code=201)\ndef crear_Classroom(Classroom: CreateClassroomRequest):\n    respuesta = Classroom_service.create_Classroom(Classroom)\n    return respuesta",
        "detail": "src.routers.classroom",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.classroom",
        "description": "src.routers.classroom",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/Classroom\",\n    tags=['Classrooms']\n)\n# Crear un nuevo salón\n@router.post(\"\", status_code=201)\ndef crear_Classroom(Classroom: CreateClassroomRequest):\n    respuesta = Classroom_service.create_Classroom(Classroom)\n    return respuesta\n# Leer todos los Classroomes",
        "detail": "src.routers.classroom",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.class_time",
        "description": "src.routers.class_time",
        "peekOfCode": "router = APIRouter(prefix=\"/class_time\", tags=[\"Class Time\"])\n@router.post(\"\")\nasync def create_class_time(\n    class_time_request: CreateClassTimeRequest, db: Session = Depends(get_db)\n):\n    class_time_service = ClassTimeService(db)\n    return class_time_service.create_class_time(class_time_request)\n@router.get(\"\")\nasync def get_all_class_times(db: Session = Depends(get_db)):\n    class_time_service = ClassTimeService(db)",
        "detail": "src.routers.class_time",
        "documentation": {}
    },
    {
        "label": "course_service",
        "kind": 5,
        "importPath": "src.routers.course",
        "description": "src.routers.course",
        "peekOfCode": "course_service = CourseService\nrouter = APIRouter(\n    prefix=\"/teacher\",\n    tags=['Teacher']\n)\n@router.post(\"\")\nasync def create_course(teacher_request: CreateCourseRequest):\n    return course_service.create_teacher(teacher_request)\n@router.get(\"\")\nasync def get_all_courses():",
        "detail": "src.routers.course",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.course",
        "description": "src.routers.course",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/teacher\",\n    tags=['Teacher']\n)\n@router.post(\"\")\nasync def create_course(teacher_request: CreateCourseRequest):\n    return course_service.create_teacher(teacher_request)\n@router.get(\"\")\nasync def get_all_courses():\n    return course_service.get_all_teachers",
        "detail": "src.routers.course",
        "documentation": {}
    },
    {
        "label": "modality_service",
        "kind": 5,
        "importPath": "src.routers.modality",
        "description": "src.routers.modality",
        "peekOfCode": "modality_service = ModalityService\n# Configuración del router para las rutas relacionadas con \"modality\"\nrouter = APIRouter(\n    prefix=\"/modality\",\n    tags=['Modality']\n)\n# Endpoint para crear una modalidad\n@router.post(\"\")\nasync def create_modality(modality_request: CreateModalityRequest):\n    return modality_service.create_modality(modality_request)",
        "detail": "src.routers.modality",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.modality",
        "description": "src.routers.modality",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/modality\",\n    tags=['Modality']\n)\n# Endpoint para crear una modalidad\n@router.post(\"\")\nasync def create_modality(modality_request: CreateModalityRequest):\n    return modality_service.create_modality(modality_request)\n# Endpoint para obtener todas las modalidades\n@router.get(\"\")",
        "detail": "src.routers.modality",
        "documentation": {}
    },
    {
        "label": "room_block_service",
        "kind": 5,
        "importPath": "src.routers.room_block",
        "description": "src.routers.room_block",
        "peekOfCode": "room_block_service = RoomBlockService\n# Configuración del router\nrouter = APIRouter(\n    prefix=\"/room_block\",\n    tags=['RoomBlock']\n)\n# Endpoint para crear un registro en \"room_block\"\n@router.post(\"\")\nasync def create_room_block(room_block_request: CreateRoomBlockRequest):\n    return room_block_service.create_room_block(room_block_request)",
        "detail": "src.routers.room_block",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.room_block",
        "description": "src.routers.room_block",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/room_block\",\n    tags=['RoomBlock']\n)\n# Endpoint para crear un registro en \"room_block\"\n@router.post(\"\")\nasync def create_room_block(room_block_request: CreateRoomBlockRequest):\n    return room_block_service.create_room_block(room_block_request)\n# Endpoint para obtener todos los registros\n@router.get(\"\")",
        "detail": "src.routers.room_block",
        "documentation": {}
    },
    {
        "label": "section_service",
        "kind": 5,
        "importPath": "src.routers.section",
        "description": "src.routers.section",
        "peekOfCode": "section_service = SectionService\nrouter = APIRouter(\n    prefix=\"/section\",\n    tags=['Section']\n)\n@router.post(\"\")\nasync def create_section(section_request: CreateSectionRequest):\n    return section_service.create_section(section_request)\n@router.get(\"\")\nasync def get_all_sections():",
        "detail": "src.routers.section",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.section",
        "description": "src.routers.section",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/section\",\n    tags=['Section']\n)\n@router.post(\"\")\nasync def create_section(section_request: CreateSectionRequest):\n    return section_service.create_section(section_request)\n@router.get(\"\")\nasync def get_all_sections():\n    return section_service.get_all_sections",
        "detail": "src.routers.section",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.section_teacher",
        "description": "src.routers.section_teacher",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/teacher_section\",  # Prefijo más descriptivo\n    tags=[\"Teacher Section\"],  # Tag actualizado\n)\n@router.post(\"\")\nasync def create_teacher_section(\n    teacher_section_request: CreateTeacherRequest, db: Session = Depends(get_db)\n):\n    teacher_section_service = SectionTeacherService(\n        db",
        "detail": "src.routers.section_teacher",
        "documentation": {}
    },
    {
        "label": "section_weeks_service",
        "kind": 5,
        "importPath": "src.routers.section_weeks",
        "description": "src.routers.section_weeks",
        "peekOfCode": "section_weeks_service = SectionWeeksService\nrouter = APIRouter(\n    prefix=\"/section-weeks\",\n    tags=['SectionWeeks']\n)\n@router.post(\"\")\nasync def create_section_week(section_weeks_request: CreateSectionWeeksRequest):\n    return section_weeks_service.create_section_week(section_weeks_request)\n@router.get(\"\")\nasync def get_all_section_weeks():",
        "detail": "src.routers.section_weeks",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.section_weeks",
        "description": "src.routers.section_weeks",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/section-weeks\",\n    tags=['SectionWeeks']\n)\n@router.post(\"\")\nasync def create_section_week(section_weeks_request: CreateSectionWeeksRequest):\n    return section_weeks_service.create_section_week(section_weeks_request)\n@router.get(\"\")\nasync def get_all_section_weeks():\n    return section_weeks_service.get_all_section_weeks()",
        "detail": "src.routers.section_weeks",
        "documentation": {}
    },
    {
        "label": "teacher_service",
        "kind": 5,
        "importPath": "src.routers.teacher",
        "description": "src.routers.teacher",
        "peekOfCode": "teacher_service = TeacherService\nrouter = APIRouter(\n    prefix=\"/teacher\",\n    tags=['Teacher']\n)\n@router.post(\"\")\nasync def create_teacher(teacher_request: CreateTeacherRequest):\n    return teacher_service.create_teacher(teacher_request)\n@router.get(\"\")\nasync def get_all_teachers():",
        "detail": "src.routers.teacher",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.teacher",
        "description": "src.routers.teacher",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/teacher\",\n    tags=['Teacher']\n)\n@router.post(\"\")\nasync def create_teacher(teacher_request: CreateTeacherRequest):\n    return teacher_service.create_teacher(teacher_request)\n@router.get(\"\")\nasync def get_all_teachers():\n    return teacher_service.get_all_teachers",
        "detail": "src.routers.teacher",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.teacher_time",
        "description": "src.routers.teacher_time",
        "peekOfCode": "router = APIRouter(prefix=\"/teacher_time\", tags=[\"Teacher Time\"])\n@router.post(\"\")\nasync def create_teacher_time(\n    teacher_time_request: CreateTeacherTimeRequest, db: Session = Depends(get_db)\n):\n    teacher_time_service = TeacherTimeService(db)\n    return teacher_time_service.create_teacher_time(teacher_time_request)\n@router.get(\"\")\nasync def get_all_teacher_times(db: Session = Depends(get_db)):\n    teacher_time_service = TeacherTimeService(db)",
        "detail": "src.routers.teacher_time",
        "documentation": {}
    },
    {
        "label": "time_block_service",
        "kind": 5,
        "importPath": "src.routers.time_block",
        "description": "src.routers.time_block",
        "peekOfCode": "time_block_service = TimeBlockService\n# Creamos el router para los bloques de tiempo\nrouter = APIRouter(\n    prefix=\"/time-block\",  # Definimos el prefijo para las rutas\n    tags=[\"TimeBlock\"]  # Etiqueta para organizar las rutas en la documentación de Swagger\n)\n# Ruta para crear un nuevo bloque de tiempo\n@router.post(\"\")\nasync def create_time_block(time_block_request: CreateTimeBlockRequest):\n    \"\"\"Crea un nuevo bloque de tiempo.\"\"\"",
        "detail": "src.routers.time_block",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.time_block",
        "description": "src.routers.time_block",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/time-block\",  # Definimos el prefijo para las rutas\n    tags=[\"TimeBlock\"]  # Etiqueta para organizar las rutas en la documentación de Swagger\n)\n# Ruta para crear un nuevo bloque de tiempo\n@router.post(\"\")\nasync def create_time_block(time_block_request: CreateTimeBlockRequest):\n    \"\"\"Crea un nuevo bloque de tiempo.\"\"\"\n    return time_block_service.create_time_block(time_block_request)\n# Ruta para crear varios horarios segun el dia, semana, cantidad de bloques y comienzo de bloque",
        "detail": "src.routers.time_block",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routers.week",
        "description": "src.routers.week",
        "peekOfCode": "router = APIRouter(prefix=\"/week\", tags=[\"Week\"])\n@router.post(\"\")\nasync def create_week(week_request: CreateWeekRequest, db: Session = Depends(get_db)):\n    week_service = WeekService(db)\n    return week_service.create_week(week_request)\n@router.get(\"\")\nasync def get_all_weeks(db: Session = Depends(get_db)):\n    week_service = WeekService(db)\n    return week_service.get_all_weeks()\n@router.get(\"/{week_id}\")",
        "detail": "src.routers.week",
        "documentation": {}
    },
    {
        "label": "AcademicPeriodService",
        "kind": 6,
        "importPath": "src.services.academic_period",
        "description": "src.services.academic_period",
        "peekOfCode": "class AcademicPeriodService:\n    def __init__(self, db_session: Session):\n        self.repository = CustomSQLAlchemyRepository(\n            db=db_session, model=AcademicPeriod\n        )\n    def get_all_academic_periods(self):\n        return self.repository.get_all()\n    def get_academic_period_by_id(self, academic_period_id: int):\n        academic_period = self.repository.get(academic_period_id)\n        if not academic_period:",
        "detail": "src.services.academic_period",
        "documentation": {}
    },
    {
        "label": "CampusService",
        "kind": 6,
        "importPath": "src.services.campus",
        "description": "src.services.campus",
        "peekOfCode": "class CampusService:\n    def __init__(self, db_session: Session):\n        # Se instancia el repositorio con el modelo Campus y la sesión actual\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=Campus)\n    def get_all_campuses(self):\n        \"\"\"Obtiene todas las Campuss.\"\"\"\n        return self.repository.get_all()\n    def get_campus_by_id(self, Campus_id: int):\n        \"\"\"Obtiene una Campus por ID.\"\"\"\n        Campus = self.repository.get(Campus_id)",
        "detail": "src.services.campus",
        "documentation": {}
    },
    {
        "label": "CareerService",
        "kind": 6,
        "importPath": "src.services.career",
        "description": "src.services.career",
        "peekOfCode": "class CareerService:\n    def __init__(self, db_session: Session):\n        # Se instancia el repositorio con el modelo career y la sesión actual\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=Career)\n    def get_all_carrers(self):\n        \"\"\"Obtiene todos las carreras.\"\"\"\n        return self.repository.get_all()\n    def get_career_by_id(self, career_id: int):\n        \"\"\"Obtiene una carrera por ID.\"\"\"\n        career = self.repository.get(career_id)",
        "detail": "src.services.career",
        "documentation": {}
    },
    {
        "label": "CareerCampusService",
        "kind": 6,
        "importPath": "src.services.career_campus",
        "description": "src.services.career_campus",
        "peekOfCode": "class CareerCampusService:\n    def __init__(self, db_session: Session):\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=CareerCampus)\n    def get_all_career_campuses(self):\n        return self.repository.get_all()\n    def get_career_campus_by_id(self, career_campus_id: int):\n        career_campus = self.repository.get(career_campus_id)\n        if not career_campus:\n            raise HTTPException(\n                status_code=404,",
        "detail": "src.services.career_campus",
        "documentation": {}
    },
    {
        "label": "CareerPeriodService",
        "kind": 6,
        "importPath": "src.services.career_period",
        "description": "src.services.career_period",
        "peekOfCode": "class CareerPeriodService:\n    def __init__(self, db_session: Session):\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=CareerPeriod)\n    def get_all_career_periods(self):\n        return self.repository.get_all()\n    def get_career_period_by_id(self, career_period_id: int):\n        career_period = self.repository.get(career_period_id)\n        if not career_period:\n            raise HTTPException(\n                status_code=404,",
        "detail": "src.services.career_period",
        "documentation": {}
    },
    {
        "label": "CareerTeacherService",
        "kind": 6,
        "importPath": "src.services.career_teacher",
        "description": "src.services.career_teacher",
        "peekOfCode": "class CareerTeacherService:\n    def __init__(self, db_session: Session):\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=CareerTeacher)\n    def get_all_career_teachers(self):\n        return self.repository.get_all()\n    def get_career_teacher_by_id(self, career_teacher_id: int):\n        career_teacher = self.repository.get(career_teacher_id)\n        if not career_teacher:\n            raise HTTPException(\n                status_code=404,",
        "detail": "src.services.career_teacher",
        "documentation": {}
    },
    {
        "label": "ClassroomService",
        "kind": 6,
        "importPath": "src.services.classroom",
        "description": "src.services.classroom",
        "peekOfCode": "class ClassroomService:\n    def __init__(self, db_session: Session):\n        # Se instancia el repositorio con el modelo Salon y la sesión actual\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=Classroom)\n    def get_all_Classroomes(self):\n        \"\"\"Obtiene todos los Classrooms.\"\"\"\n        return self.repository.get_all()\n    def get_Classroom_by_id(self, Classroom_id: int):\n        \"\"\"Obtiene un Classroom por ID.\"\"\"\n        Classroom = self.repository.get(Classroom_id)",
        "detail": "src.services.classroom",
        "documentation": {}
    },
    {
        "label": "ClassTimeService",
        "kind": 6,
        "importPath": "src.services.class_time",
        "description": "src.services.class_time",
        "peekOfCode": "class ClassTimeService:\n    def __init__(self, db_session: Session):\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=ClassTime)\n    def get_all_class_times(self):\n        return self.repository.get_all()\n    def get_class_time_by_id(self, class_time_id: int):\n        class_time = self.repository.get(class_time_id)\n        if not class_time:\n            raise HTTPException(\n                status_code=404,",
        "detail": "src.services.class_time",
        "documentation": {}
    },
    {
        "label": "CourseService",
        "kind": 6,
        "importPath": "src.services.course",
        "description": "src.services.course",
        "peekOfCode": "class CourseService:\n    def __init__(self, db_session: Session):\n        # Se instancia el repositorio con el modelo Course y la sesión actual\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=Course)\n    def get_all_courses(self):\n        \"\"\"Obtiene todas los cursos.\"\"\"\n        return self.repository.get_all()\n    def get_course_by_id(self, Course_id: int):\n        \"\"\"Obtiene un curso por ID.\"\"\"\n        Course = self.repository.get(Course_id)",
        "detail": "src.services.course",
        "documentation": {}
    },
    {
        "label": "ModalityService",
        "kind": 6,
        "importPath": "src.services.modality",
        "description": "src.services.modality",
        "peekOfCode": "class ModalityService:\n    def __init__(self, db_session: Session):\n        # Repositorio personalizado para la tabla \"modality\"\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=Modality)\n    # Método para obtener todas las modalidades\n    def get_all_modalities(self):\n        return self.repository.get_all()\n    # Método para obtener una modalidad por su ID\n    def get_modality_by_id(self, modality_id: int):\n        modality = self.repository.get(modality_id)",
        "detail": "src.services.modality",
        "documentation": {}
    },
    {
        "label": "RoomBlockService",
        "kind": 6,
        "importPath": "src.services.room_block",
        "description": "src.services.room_block",
        "peekOfCode": "class RoomBlockService:\n    def __init__(self, db_session: Session):\n        # Repositorio personalizado con el modelo RoomBlock\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=RoomBlock)\n    # Obtener todos los registros\n    def get_all_room_blocks(self):\n        return self.repository.get_all()\n    # Obtener un registro por su ID\n    def get_room_block_by_id(self, room_block_id: int):\n        room_block = self.repository.get(room_block_id)",
        "detail": "src.services.room_block",
        "documentation": {}
    },
    {
        "label": "SectionService",
        "kind": 6,
        "importPath": "src.services.section",
        "description": "src.services.section",
        "peekOfCode": "class SectionService:\n    def __init__(self, db_session: Session):\n        # Se instancia el repositorio con el modelo Section y la sesión actual\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=Section)\n    def get_all_sections(self):\n        return self.repository.get_all()\n    def get_section_by_id(self, section_id: int):\n        section = self.repository.get(section_id)\n        if not section:\n            raise HTTPException(status_code=404, detail=f\"Section with ID {section_id} not found\")",
        "detail": "src.services.section",
        "documentation": {}
    },
    {
        "label": "SectionTeacherService",
        "kind": 6,
        "importPath": "src.services.section_teacher",
        "description": "src.services.section_teacher",
        "peekOfCode": "class SectionTeacherService:  # Nombre más descriptivo\n    def __init__(self, db_session: Session):\n        self.repository = CustomSQLAlchemyRepository(\n            db=db_session, model=CreateSectionTeacherRequest\n        )  # Usa el modelo Teacher_Section\n    def get_all_teacher_sections(self):\n        \"\"\"Obtiene todas las asignaciones de profesor-sección.\"\"\"\n        return self.repository.get_all()\n    def get_teacher_section_by_id(self, teacher_section_id: int):\n        \"\"\"Obtiene una asignación profesor-sección por ID.\"\"\"",
        "detail": "src.services.section_teacher",
        "documentation": {}
    },
    {
        "label": "SectionWeeksService",
        "kind": 6,
        "importPath": "src.services.section_weeks",
        "description": "src.services.section_weeks",
        "peekOfCode": "class SectionWeeksService:\n    def __init__(self, db_session: Session):\n        # Se instancia el repositorio con el modelo SectionWeeks y la sesión actual\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=SectionWeeks)\n    def get_all_section_weeks(self):\n        return self.repository.get_all()\n    def get_section_week(self, section_id: int, week_id: int):\n        section_week = self.repository.filter_by(\n            section_id=section_id,\n            week_id=week_id",
        "detail": "src.services.section_weeks",
        "documentation": {}
    },
    {
        "label": "TeacherService",
        "kind": 6,
        "importPath": "src.services.teacher",
        "description": "src.services.teacher",
        "peekOfCode": "class TeacherService:\n    def __init__(self, db_session: Session):\n        # Se instancia el repositorio con el modelo Teacher y la sesión actual\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=Teacher)\n    def get_all_teachers(self):\n        \"\"\"Obtiene todos los profesores.\"\"\"\n        return self.repository.get_all()\n    def get_teacher_by_id(self, teacher_id: int):\n        \"\"\"Obtiene un profesor por ID.\"\"\"\n        teacher = self.repository.get(teacher_id)",
        "detail": "src.services.teacher",
        "documentation": {}
    },
    {
        "label": "TeacherTimeService",
        "kind": 6,
        "importPath": "src.services.teacher_time",
        "description": "src.services.teacher_time",
        "peekOfCode": "class TeacherTimeService:\n    def __init__(self, db_session: Session):\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=TeacherTime)\n    def get_all_teacher_times(self):\n        return self.repository.get_all()\n    def get_teacher_time_by_id(self, teacher_time_id: int):\n        teacher_time = self.repository.get(teacher_time_id)\n        if not teacher_time:\n            raise HTTPException(\n                status_code=404,",
        "detail": "src.services.teacher_time",
        "documentation": {}
    },
    {
        "label": "TimeBlockService",
        "kind": 6,
        "importPath": "src.services.time_block",
        "description": "src.services.time_block",
        "peekOfCode": "class TimeBlockService:\n    def __init__(self, db_session: Session):\n        # Se instancia el repositorio con el modelo TimeBlock y la sesión actual\n        self.db_session = db_session\n        self.repository = CustomSQLAlchemyRepository(db=db_session, model=TimeBlock)\n        self.week_repository = CustomSQLAlchemyRepository(db=db_session, model=Week)\n        self.hours_repository = CustomSQLAlchemyRepository(db=db_session, model=Hours)\n        self.academic_period_repository = CustomSQLAlchemyRepository(\n            db=db_session, model=AcademicPeriod\n        )",
        "detail": "src.services.time_block",
        "documentation": {}
    },
    {
        "label": "Week",
        "kind": 6,
        "importPath": "src.services.week",
        "description": "src.services.week",
        "peekOfCode": "class Week(Base):\n    __tablename__ = \"weeks\"\n    id = Column(Integer, primary_key=True, index=True)\n    period_id = Column(Integer, ForeignKey(\"academic_period.id\"), index=True)\n    number = Column(Integer, index=True)\n    academic_period = relationship(\"AcademicPeriod\", back_populates=\"week\")\n    time_block = relationship(\"TimeBlock\", back_populates=\"week\")\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,",
        "detail": "src.services.week",
        "documentation": {}
    },
    {
        "label": "CreateWeekRequest",
        "kind": 6,
        "importPath": "src.services.week",
        "description": "src.services.week",
        "peekOfCode": "class CreateWeekRequest(BaseModel):\n    period_id: Integer\n    number: Integer\n    model_config = {\n        \"from_attributes\": True,\n        \"arbitrary_types_allowed\": True,\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"period_id\": \"null\",",
        "detail": "src.services.week",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "class Settings(BaseSettings):\n    URL_DATABASE: str\nsettings = Settings()",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "settings = Settings()",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "CustomSQLAlchemyRepository",
        "kind": 6,
        "importPath": "src.database",
        "description": "src.database",
        "peekOfCode": "class CustomSQLAlchemyRepository(Generic[ModelType]):\n    def __init__(self, db: Session, model: Type[ModelType]):\n        \"\"\"\n        Inicializa el repositorio para un modelo específico y una sesión activa.\n        \"\"\"\n        self.db = db\n        self.model = model\n    def get(self, id: int) -> Optional[ModelType]:\n        \"\"\"Obtiene un registro por ID.\"\"\"\n        return self.db.query(self.model).filter(self.model.id == id).first()",
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "kind": 6,
        "importPath": "src.database",
        "description": "src.database",
        "peekOfCode": "class DatabaseConnection:\n    def __init__(self, database_url: str = settings.URL_DATABASE):\n        \"\"\"\n        Inicializa la conexión a la base de datos.\n        \"\"\"\n        self.engine = create_engine(database_url, pool_pre_ping=True)\n        self.SessionLocal = sessionmaker(\n            autocommit=False, autoflush=False, bind=self.engine\n        )\n    def get_session(self):",
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "src.database",
        "description": "src.database",
        "peekOfCode": "def get_db():\n    return db_connection.get_session()",
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "src.database",
        "description": "src.database",
        "peekOfCode": "Base = declarative_base()\n# Definición de un tipo genérico para los modelos\nModelType = TypeVar(\"ModelType\")\nclass CustomSQLAlchemyRepository(Generic[ModelType]):\n    def __init__(self, db: Session, model: Type[ModelType]):\n        \"\"\"\n        Inicializa el repositorio para un modelo específico y una sesión activa.\n        \"\"\"\n        self.db = db\n        self.model = model",
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "ModelType",
        "kind": 5,
        "importPath": "src.database",
        "description": "src.database",
        "peekOfCode": "ModelType = TypeVar(\"ModelType\")\nclass CustomSQLAlchemyRepository(Generic[ModelType]):\n    def __init__(self, db: Session, model: Type[ModelType]):\n        \"\"\"\n        Inicializa el repositorio para un modelo específico y una sesión activa.\n        \"\"\"\n        self.db = db\n        self.model = model\n    def get(self, id: int) -> Optional[ModelType]:\n        \"\"\"Obtiene un registro por ID.\"\"\"",
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "db_connection",
        "kind": 5,
        "importPath": "src.database",
        "description": "src.database",
        "peekOfCode": "db_connection = DatabaseConnection()\ndef get_db():\n    return db_connection.get_session()",
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "start_app",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def start_app() -> FastAPI:\n    app = FastAPI(\n        title=\"Generador-Horarios\",\n        description=\"API diseñada para gestionar generador de horarios\",\n        version=\"v0.0.1\",\n        debug=True,\n    )\n    origins = [\"*\"]\n    app.add_middleware(\n        CORSMiddleware,",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "app = start_app()",
        "detail": "src.main",
        "documentation": {}
    }
]