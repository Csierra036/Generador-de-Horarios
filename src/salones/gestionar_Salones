from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List

app = FastAPI()

# Modelo de datos
class Salon(BaseModel):
    nombre: str
    capacidad: int = 0
    ubicacion: str = "Desconocida"

# Base de datos simulada
salones = []
id_counter = 1

# Crear un nuevo salón
@app.post("/salones", response_model=dict, status_code=201)
def crear_salon(salon: Salon):
    global id_counter
    nuevo_salon = {
        "id": id_counter,
        "nombre": salon.nombre,
        "capacidad": salon.capacidad,
        "ubicacion": salon.ubicacion,
    }
    salones.append(nuevo_salon)
    id_counter += 1
    return nuevo_salon

# Leer todos los salones
@app.get("/salones", response_model=List[dict])
def obtener_salones():
    return salones

# Leer un salón por ID
@app.get("/salones/{salon_id}", response_model=dict)
def obtener_salon(salon_id: int):
    salon = next((s for s in salones if s["id"] == salon_id), None)
    if salon:
        return salon
    raise HTTPException(status_code=404, detail="Salón no encontrado")

# Actualizar un salón
@app.put("/salones/{salon_id}", response_model=dict)
def actualizar_salon(salon_id: int, salon: Salon):
    for s in salones:
        if s["id"] == salon_id:
            s["nombre"] = salon.nombre
            s["capacidad"] = salon.capacidad
            s["ubicacion"] = salon.ubicacion
            return s
    raise HTTPException(status_code=404, detail="Salón no encontrado")

# Borrar un salón
@app.delete("/salones/{salon_id}", response_model=dict)
def borrar_salon(salon_id: int):
    global salones
    salon = next((s for s in salones if s["id"] == salon_id), None)
    if salon:
        salones = [s for s in salones if s["id"] != salon_id]
        return {"message": "Salón eliminado"}
    raise HTTPException(status_code=404, detail="Salón no encontrado")
